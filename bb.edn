{:deps {local/deps {:local/root "."}}
 :min-bb-version "1.3.0"
 :paths ["bb" "src"]
 :tasks {:requires
         ([clojure.edn :as edn]
          [clojure.string :as str]
          [tasks])

         bump:minor
         {:doc "Bump the current minor version"
          :task (tasks/bump {:dry-run true :kind :minor})}

         bump
         {:doc "Bump the current version (usage: bb bump patch|minor|major)"
          :task (tasks/bump {:dry-run true :kind (keyword (first *command-line-args*))})}

         build:binary
         {:doc "Compile the pod into a statically-linked binary with GraalVM native-image (Linux only)"
          :depends [build:uber]
          :task (shell "script/compile.sh")}

         build:jar
         {:doc "Compile the the pod into a jar"
          :depends [clean]
          :task (clojure "-T:build jar")}

         build:uber
         {:doc "Compile the the pod into an uberjar"
          :depends [clean]
          :task (clojure "-T:build uber")}

         clean
         {:doc "Clean all compilation artifacts (e.g. jars, binaries)"
          :task (shell "rm -rf target/")}

         cp
         {:doc "Print the classpath" :task (tasks/print-classpath)}

         deploy:clojars
         {:doc "Deploy the pod to Clojars"
          :depends [build:uber]
          :task (clojure "-T:build deploy")}

         deps:audit
         {:doc "Audit all dependencies declared in deps.edn"
          :task (clojure "-M:clj-nvd check")}

         deps:license
         {:doc "List the licenses of all the dependencies"
          :task (shell "neil license list")}

         deps:upgrade:dry
         {:doc "Print dependencies that would be upgraded"
          :task (shell "neil dep upgrade --dry-run")}

         list:jar
         {:doc "List the contents of the jar"
          :depends [build:jar]
          :task (let [project (-> (edn/read-string (slurp "deps.edn")) :aliases :neil :project)
                      pod-name "pod.jackdbd.jsoup"
                      pod-version (:version project)
                      jar-path (format "target/%s-%s.jar" pod-name pod-version)]
                  (shell "jar --file" jar-path "--list"))}

         list:uber
         {:doc "List the contents of the uberjar"
          :depends [build:uber]
          :task (let [project (-> (edn/read-string (slurp "deps.edn")) :aliases :neil :project)
                      pod-name "pod.jackdbd.jsoup"
                      pod-version (:version project)
                      jar-path (format "target/%s-%s-standalone.jar" pod-name pod-version)]
                  (shell "jar --file" jar-path "--list"))}

         prerelease
         {:doc "Create a prerelease"
          :task (tasks/prerelease {:dry-run false :force-with-lease true})}

         release
         {:doc "Promote the current prerelease to release"
          :task (tasks/release {:dry-run true})}

         sync-tags
         {:doc "Run git fetch --force on all v*.*.*-SNAPSHOT tags"
          :task (tasks/fetch-force-snapshot-tags)}

         test
         {:doc "Run all tests"
          ;; :depends [build:binary]
          :task (clojure "-X:test")}}}
