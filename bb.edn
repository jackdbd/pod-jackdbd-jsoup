{:deps {local/deps {:local/root "."}}
 :min-bb-version "1.3.0"
 :paths ["bb" "dev" "src"]
 :tasks {:requires ([clojure.edn :as edn]
                    [tasks])
         build:native {:doc "Compile the Babashka pod into a statically-linked binary with GraalVM native-image"
                       :task (shell "script/compile.sh")}
         build:uberjar {:doc "Package the the Babashka pod into an uberjar"
                        :depends [clean]
                        :task (clojure "-T:build uber")}
         clean {:doc "Clean all compilation artifacts (e.g. jars, binaries)"
                :task (shell "rm -rf target/")}
         cp {:doc "Print the classpath" :task (tasks/print-classpath)}
         demo:native {:doc "Run a demo that uses the Babashka pod compiled as a binary"
                      :depends [build:native]
                      :task (tasks/demo-pod-native)}
         demo:uberjar {:doc "Run a demo that uses the Babashka pod packaged into an uberjar"
                     ;;   :depends [build:uberjar]
                       :task (tasks/demo-pod-uberjar)}
         list:uberjar {:doc "List the contents of the Babashka pod packaged into an uberjar"
                       ;; :depends [build:uberjar]
                       :task (let [project (-> (edn/read-string (slurp "deps.edn")) :aliases :neil :project)
                                   pod-name "pod.jackdbd.jsoup"
                                   pod-version (:version project)
                                   jar-path (format "target/%s-%s-standalone.jar" pod-name pod-version)]
                               (shell "jar --file" jar-path "--list"))}
         tests {:doc "Run all tests" :task (clojure "-M:test")}}}
