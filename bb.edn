{:deps {local/deps {:local/root "."}}
 :min-bb-version "1.3.0"
 :paths ["bb" "src"]
 :tasks {:requires ([clojure.edn :as edn]
                    [tasks])

         build:binary
         {:doc "Compile the pod into a statically-linked binary with GraalVM native-image (Linux only)"
          :depends [build:uber]
          :task (shell "script/compile.sh")}

         build:jar
         {:doc "Compile the the pod into a jar"
          :depends [clean]
          :task (if-let [snapshot-suffix (System/getenv "SNAPSHOT_SUFFIX")]
                  (clojure "-T:build jar :snapshot-suffix" (keyword snapshot-suffix))
                  (clojure "-T:build jar"))}

         build:uber
         {:doc "Compile the the pod into an uberjar"
          :depends [clean]
          :task
          (if-let [snapshot-suffix (System/getenv "SNAPSHOT_SUFFIX")]
            (clojure "-T:build uber :snapshot-suffix" (keyword snapshot-suffix))
            (clojure "-T:build uber"))}

         clean
         {:doc "Clean all compilation artifacts (e.g. jars, binaries)"
          :task (shell "rm -rf target/")}

         cp
         {:doc "Print the classpath"
          :task (tasks/print-classpath)}

         deploy:clojars
         {:doc "Deploy the pod to Clojars"
          :depends [build:uber]
          :task
          (if-let [snapshot-suffix (System/getenv "SNAPSHOT_SUFFIX")]
            (clojure "-T:build deploy :snapshot-suffix" (keyword snapshot-suffix))
            (clojure "-T:build deploy"))}

         deps:audit
         {:doc "Audit all dependencies declared in deps.edn"
          :task (clojure "-M:clj-nvd check")}

         list:jar
         {:doc "List the contents of the jar"
          :depends [build:jar]
          :task (let [project (-> (edn/read-string (slurp "deps.edn")) :aliases :neil :project)
                      pod-name "pod.jackdbd.jsoup"
                      pod-version (:version project)
                      jar-path (format "target/%s-%s.jar" pod-name pod-version)]
                  (shell "jar --file" jar-path "--list"))}

         list:uberjar
         {:doc "List the contents of the uberjar"
          :depends [build:uber]
          :task (let [project (-> (edn/read-string (slurp "deps.edn")) :aliases :neil :project)
                      pod-name "pod.jackdbd.jsoup"
                      pod-version (:version project)
                      jar-path (format "target/%s-%s-standalone.jar" pod-name pod-version)]
                  (shell "jar --file" jar-path "--list"))}

         test
         {:doc "Run all tests"
          ;; :depends [build:binary]
          :task (clojure "-X:test")}}}
